#version 400 core

// The names for the inputs of the fragment shader must be exactly equal to the output names of vertex shader!

//in vec3 colour;       // See vertexShader.
in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void) {
    vec3 unitNormal = normalize(surfaceNormal);        //Vector magnitude is irrelevant, so we normalize to just focus on direction, i.e., make magnitude = 1.
    vec3 unitLightVector = normalize(toLightVector);

    float nDot1 = dot(unitNormal, unitLightVector);    //This number represents how bright a pixel should be.
    float brightness = max(nDot1, 0.2);      // Recall dot product can yield negative results, we want to bound between 0 and 1.
    vec3 diffuse = brightness * lightColour;

    vec3 unitVectorToCamera = normalize(toCameraVector);
    vec3 lightDirection = -unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

    float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
    specularFactor = max(specularFactor, 0.0);
    float dampedSpecular = pow(specularFactor, shineDamper);    // see physics for reflectivity

    vec3 finalSpecular = lightColour * reflectivity * dampedSpecular;

    vec4 textureColour = texture(modelTexture, pass_textureCoordinates);
    if (textureColour.a < 0.5) {
        discard;
    }

    out_Color = vec4(diffuse, 1.0) * textureColour + vec4(finalSpecular, 1.0);
    out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
}