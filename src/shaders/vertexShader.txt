#version 400 core

in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;

// out vec3 colour;                 // We comment this out as it as a demo of how shaders compute colors.
out vec2 pass_textureCoordinates;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;
uniform float useFakeLighting;      //0 -> don't use; 1 -> use.

uniform int numberOfRows;
uniform vec2 offset;

const float density = 0.0035;
const float gradient = 5.0;

void main(void) {

    vec4 worldPosition = transformationMatrix * vec4(position, 1.0);        // We make position a 4D vector because we need to multiply by the 4x4 Transition Matrix. Look up transition matrices in openGL.
    vec4 positionRelativeToCam = viewMatrix * worldPosition;
    gl_Position = projectionMatrix * positionRelativeToCam;
    pass_textureCoordinates = (textureCoordinates / numberOfRows) + offset;

    vec3 actualNormal = normal;
    if (useFakeLighting > 0.5) {
        actualNormal = vec3(0.0, 1.0, 0.0);
    }

    surfaceNormal = (transformationMatrix * vec4(actualNormal, 0.0)).xyz;
    toLightVector = lightPosition - worldPosition.xyz;
    toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;

    float distance = length(positionRelativeToCam.xyz);
    visibility = exp(-pow((distance * density), gradient));
    visibility = clamp(visibility, 0.0, 1.0);       // Bounds the value of visibility between 0 and 1.

    // colour = vec3(position.x + 0.5, 0.0, position.y + 0.5);     //(r, g, b) colors // commented out, see above.
}